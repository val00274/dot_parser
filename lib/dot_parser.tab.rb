#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

Graph = Struct.new(:id, :strict?, :type, :statements)
AttrList = Struct.new(:type, :attrs)
Attr = Struct.new(:key, :value)
Edge = Struct.new(:path, :attrs)
Node = Struct.new(:id, :ports, :attrs)

module DotParser
  class Parser < Racc::Parser

module_eval(<<'...end dot.y/module_eval...', 'dot.y', 89)
  def read(file)
      parse(file.readlines.join("").gsub("\n", ""))
  end

  def parse(str)
    @yydebug = true
    @q = []
    until str.nil? or str.empty?
      case str 
      when /^\s+/
      when /^(strict|graph|node)/
        @q.push [$&, $&]
      when /^\"([^"]+)\"/
        @q.push [:ID, $1]
      when /^[0-9a-zA-Z_]+/, /^-[0-9]+(\.[0-9]+)?/
        @q.push [:ID, $&]
      when /^(--|->)/, /^\W/
        @q.push [$&, $&]
      end
      str = $'
    end
    do_parse
  end
  
  def next_token
    @q.shift
  end
...end dot.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    48,   -34,    31,     3,    44,    35,   -34,    30,    33,    43,
    35,    47,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    28,     6,     7,    21,    35,    18,    62,    28,
    22,    23,    21,    29,    18,    67,    27,    22,    23,    28,
   -30,   -30,    21,    27,    18,    11,    28,    22,    23,    21,
    69,    18,    28,    27,    22,    23,    28,    66,    70,    21,
    27,    18,    40,    41,    22,    23,    27,    40,    41,    71,
    27,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    72,    73,    10,    33,     8,    76,     4,    35,    62,
    80,    81 ]

racc_action_check = [
    33,    26,    18,     0,    27,    20,    26,    14,    18,    27,
    26,    31,    33,    33,    33,    33,    33,    33,    33,    33,
    33,    33,    28,     2,     2,    28,    24,    28,    35,    30,
    28,    28,    30,    12,    30,    43,    28,    30,    30,    67,
    19,    19,    67,    30,    67,     9,    11,    67,    67,    11,
    45,    11,    39,    67,    11,    11,    44,    39,    48,    44,
    11,    44,    25,    25,    44,    44,    39,    65,    65,    60,
    44,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    61,    62,     5,    66,     4,    68,     1,    71,    72,
    73,    75 ]

racc_action_pointer = [
    -1,    87,    18,   nil,    85,    76,   nil,   nil,   nil,    43,
   nil,    44,    30,   nil,    -1,   nil,   nil,   nil,    -7,    23,
    -7,   nil,   nil,   nil,    14,    45,    -2,     2,    20,   nil,
    27,     4,   nil,    -7,   nil,    21,   nil,   nil,   nil,    50,
   nil,   nil,   nil,    33,    54,    47,   nil,   nil,    43,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    56,    67,    73,   nil,   nil,    50,    69,    37,    83,   nil,
    52,    76,    82,    83,   nil,    88,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
    -3,   -56,   -56,    -2,   -56,    -7,    -4,    -5,    82,   -56,
    -6,   -56,   -56,    -8,    -9,   -12,   -13,   -14,   -40,   -16,
   -56,   -18,   -19,   -20,   -34,   -56,   -29,   -56,   -56,    -1,
   -10,   -56,   -36,   -56,   -17,   -56,   -27,   -33,   -28,   -56,
   -44,   -45,   -35,   -56,   -56,   -56,   -11,   -15,   -37,   -38,
   -46,   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,
   -56,   -23,   -25,   -29,   -30,   -31,   -40,   -56,   -56,   -43,
   -56,   -21,   -56,   -56,   -32,   -56,   -42,   -39,   -22,   -24,
   -26,   -41 ]

racc_goto_table = [
    13,    34,    38,    60,    49,    36,    12,    42,     9,     5,
    64,    65,     2,    63,     1,   nil,   nil,    45,   nil,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    68,   nil,   nil,   nil,   nil,   nil,   nil,
    79,    77,    74,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    78,   nil,   nil,   nil,    75 ]

racc_goto_check = [
     6,    13,    19,    14,    23,    17,     5,    17,     4,     3,
    11,    18,     2,    20,     1,   nil,   nil,     6,   nil,     6,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,
    14,    23,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    13,   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,    14,    12,     7,     3,    -5,   -11,   nil,   nil,   nil,
   nil,   -29,   nil,   -19,   -32,   nil,   nil,   -19,   -28,   -23,
   -26,   nil,   nil,   -29 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,    15,    16,
    17,    19,    20,    37,   nil,    61,    24,   nil,    25,   nil,
    26,    39,    32,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  6, 30, :_reduce_1,
  1, 31, :_reduce_none,
  0, 31, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 33, :_reduce_none,
  0, 33, :_reduce_none,
  1, 34, :_reduce_8,
  1, 35, :_reduce_9,
  2, 35, :_reduce_10,
  3, 35, :_reduce_11,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  3, 36, :_reduce_none,
  1, 36, :_reduce_none,
  2, 39, :_reduce_17,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  3, 42, :_reduce_21,
  4, 42, :_reduce_22,
  1, 43, :_reduce_23,
  3, 43, :_reduce_24,
  1, 44, :_reduce_25,
  3, 44, :_reduce_26,
  2, 38, :_reduce_27,
  2, 45, :_reduce_28,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  2, 48, :_reduce_31,
  3, 48, :_reduce_32,
  1, 46, :_reduce_none,
  0, 46, :_reduce_none,
  2, 37, :_reduce_35,
  2, 49, :_reduce_36,
  2, 51, :_reduce_37,
  2, 51, :_reduce_38,
  4, 51, :_reduce_39,
  0, 51, :_reduce_40,
  5, 40, :_reduce_41,
  4, 40, :_reduce_42,
  3, 40, :_reduce_43,
  1, 50, :_reduce_none,
  1, 50, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none ]

racc_reduce_n = 56

racc_shift_n = 82

racc_token_table = {
  false => 0,
  :error => 1,
  "{" => 2,
  "}" => 3,
  "strict" => 4,
  "graph" => 5,
  "digraph" => 6,
  :ID => 7,
  ";" => 8,
  "=" => 9,
  "node" => 10,
  "edge" => 11,
  "[" => 12,
  "]" => 13,
  "," => 14,
  ":" => 15,
  "subgraph" => 16,
  "--" => 17,
  "->" => 18,
  :n => 19,
  :ne => 20,
  :e => 21,
  :se => 22,
  :s => 23,
  :sw => 24,
  :w => 25,
  :nw => 26,
  :c => 27,
  :_ => 28 }

racc_nt_base = 29

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"{\"",
  "\"}\"",
  "\"strict\"",
  "\"graph\"",
  "\"digraph\"",
  "ID",
  "\";\"",
  "\"=\"",
  "\"node\"",
  "\"edge\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "\":\"",
  "\"subgraph\"",
  "\"--\"",
  "\"->\"",
  "n",
  "ne",
  "e",
  "se",
  "s",
  "sw",
  "w",
  "nw",
  "c",
  "_",
  "$start",
  "graph",
  "strict_opt",
  "graph_or_digraph",
  "id_opt",
  "graph_declare",
  "stmt_list",
  "stmt",
  "node_stmt",
  "edge_stmt",
  "attr_stmt",
  "subgraph",
  "graph_or_node_or_edge",
  "attr_list",
  "a_list",
  "a",
  "edge_declare",
  "attr_list_opt",
  "node_id_or_subgraph",
  "edge_rhs",
  "node_id",
  "edgeop",
  "port_opt",
  "compass_pt" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'dot.y', 10)
  def _reduce_1(val, _values, result)
     result = Graph.new(val[2], ! val[0].nil?, val[1].to_sym, val[4]) 
    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'dot.y', 21)
  def _reduce_8(val, _values, result)
     result = val[0].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 23)
  def _reduce_9(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 24)
  def _reduce_10(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 25)
  def _reduce_11(val, _values, result)
     result = [ val[0], val[2] ] 
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'dot.y', 33)
  def _reduce_17(val, _values, result)
     result = AttrList.new(val[0].to_sym, val[1].flatten) 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'dot.y', 39)
  def _reduce_21(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 40)
  def _reduce_22(val, _values, result)
     result = [ val[1], val[4] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 42)
  def _reduce_23(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 43)
  def _reduce_24(val, _values, result)
     result = [ val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 45)
  def _reduce_25(val, _values, result)
     result = Attr.new(val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 46)
  def _reduce_26(val, _values, result)
     result = Attr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 48)
  def _reduce_27(val, _values, result)
     result = Edge.new(val[0].flatten, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 50)
  def _reduce_28(val, _values, result)
     result = [ val[0], val[1] ] 
    result
  end
.,.,

# reduce 29 omitted

# reduce 30 omitted

module_eval(<<'.,.,', 'dot.y', 55)
  def _reduce_31(val, _values, result)
     result = [ val[0], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 56)
  def _reduce_32(val, _values, result)
     result = [ val[0], val[1], val[2] ] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'dot.y', 61)
  def _reduce_35(val, _values, result)
     val[0].attr = val[1]; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 63)
  def _reduce_36(val, _values, result)
     result = Node.new(val[0], val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 65)
  def _reduce_37(val, _values, result)
     result = [ val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 66)
  def _reduce_38(val, _values, result)
     result = [ val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 67)
  def _reduce_39(val, _values, result)
     result = [ val[1], val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 68)
  def _reduce_40(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 70)
  def _reduce_41(val, _values, result)
     result = Graph.new(val[1], nil, :subgraph, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 71)
  def _reduce_42(val, _values, result)
     result = Graph.new(nil,    nil, :subgraph, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'dot.y', 72)
  def _reduce_43(val, _values, result)
     result = Graph.new(nil,    nil, :subgraph, val[1]) 
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module DotParser
